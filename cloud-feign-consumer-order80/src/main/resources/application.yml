server:
  port: 80

spring:
  application:
    name: cloud-order-service

  # consul
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: # 显示cloud-payment-service
        prefer-ip-address: true #优先使用服务ip进行注册
        service-name: ${spring.application.name}
    openfeign:
      client:
        config:
#          default:
#            connectTimeout: 2000 # 连接超时时间，打通网络连接
#            readTimeout: 2000 #读取超时时间，业务处理
          cloud-payment-service:
            connectTimeout: 20000 # 连接超时时间，打通网络连接
            readTimeout: 20000 #读取超时时间，业务处理
      httpclient:
        hc5:
          enabled: true
      compression: #开启压缩，节省带宽
        request:
          enabled: true
          min-request-size: 2048 # 最小触发压缩的大小  单位是B，默认是2KB就启用压缩
          min-type: text/xml,application/xml,application/json # 触发压缩的数据类型
        response:
          enabled: true
#      circuitbreaker: #开启circuitbreaker和分组激活
#        enabled: true
#        group:
#          enabled: true # 没开分组永远不用分组的配置，精确邮箱，分组次之，默认最后

  # springboot项目可以用yml配置，也可在需要的字段上增加注解：@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

#logging:
#  level:
#    com: #开启指定模块的日志打印 包名+类名
#      zongyu:
#        cloud:
#          apis:
#            PayFeignClient: debug

# 基于次数
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分比CircuitBreaker变为OPEN状态
#        slidingWindowType: COUNT_BASED # 滑动窗口类型
#        slidingWindowSize: 6 #滑动窗口的大小配置COUNT_BASED表示6个请求，配置TIME_BASED表示6秒
#        minimumNumberOfCalls: 6 # 断路器计算失败率或慢调用率之前所需的最小样本
#        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否开启自动从开启状态到半开启状态，默认值为启用
#        waitDurationInOpenState: 5s # 从OPEN到HALF_OPEN需要等待时间
#        permittedNumberOfCallsInHalfOpenState: 2 # 半开启状态允许最大请求数，默认值为10
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

# 基于次数
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s # 注意，默认限制远程1s，超过1s就超时，配置了降级，就走降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分比CircuitBreaker变为OPEN状态
#        slowCallDurationThreshold: 2s # 慢调用阈值，高于这个阈值视为慢调用并增加调用比例
#        slowCallRateThreshold: 30 # 慢调用比例峰值
#        slidingWindowType: TIME_BASED # 滑动窗口类型
#        slidingWindowSize: 2 #滑动窗口的大小配置COUNT_BASED表示2个请求，配置TIME_BASED表示2秒
#        minimumNumberOfCalls: 2 # 断路器计算失败率或慢调用率之前所需的最小样本
#        waitDurationInOpenState: 5s # 从OPEN到HALF_OPEN需要等待时间
#        permittedNumberOfCallsInHalfOpenState: 2 # 半开启状态允许最大请求数，默认值为10
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

# resilience4j bulkhead 信号量示例
#resilience4j:
#  bulkhead:
#    configs:
#      default:
#        maxConcurrentCalls: 2 # 隔离允许并发线程执行的最大数量
#        maxWaitDuration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，只等1秒，超过就走兜底方法
#    instances:
#      cloud-payment-service:
#        baseConfig: default
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s

# resilience4j bulkhead 线程池示例
# 注意，请设置为false，新启线程和原来主线程脱离
# spring.cloud.openfeign.circuitbreaker.group.enabled
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s # 默认限制远程1秒，方便显示改为10秒
#  thread-pool-bulkhead:
#    configs:
#      default: # 注意max-thread-pool-size包含了core-thread-pool-size，所以这里只有2个线程正常访问
#        core-thread-pool-size: 1
#        max-thread-pool-size: 1
#        queue-capacity: 1
#    instances:
#      cloud-payment-service:
#        baseConfig: default

# resilience4j 限流
#resilience4j:
#  ratelimiter:
#    configs:
#      default:
#        limitForPeriod: 2 # 再一次刷新周期内，允许执行的最大请求数
#        limitRefreshPeriod: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
#        timeout-duration: 1 # 线程等待权限的默认等待时间
#    instances:
#      cloud-payment-service:
#        baseConfig: default

#zipkin
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # 采样率默认为0.1（10次只有有一次记录下来），值越大收集越及时
